#General Validation Parameters
newline = \n
successfully.executed = has succeeded\n
failed = has failed\n

#SIARD Internal File Structure
module.e.path.to.metadata.xml = /header/metadata.xml
module.e.siard.description = /header/metadata.xml
module.e.siard.path.to.content = content

#SIARD XML Processing
module.e.metadata.xml.prefix = pre
module.e.table.xsd.prefix = xs
module.e.siard.metadata.xml.schemas.name = schemas
module.e.siard.metadata.xml.schema.name = schema
module.e.siard.metadata.xml.schema.folder.name = folder
module.e.siard.metadata.xml.tables.name = tables
module.e.siard.metadata.xml.table.name = table
module.e.siard.metadata.xml.table.folder.name = folder
module.e.siard.metadata.xml.table.schema.extension = .xsd
module.e.siard.metadata.xml.columns.name = columns
module.e.siard.metadata.xml.column.name = column
module.e.siard.metadata.xml.type.element.name = type
module.e.siard.metadata.xml.name.element.name = name
module.e.siard.metadata.xml.nullable.element.name = nullable
module.e.siard.table.xsd.type.attribute.name = type
module.e.siard.table.xsd.file.extension = .xsd
module.e.siard.table.xsd.complexType = complexType
module.e.siard.table.xsd.sequence = sequence
module.e.siard.table.xsd.element = element
module.e.siard.table.xsd.attribute.minOccurs.name = minOccurs

#Attribute Count Validator
module.e.attribute.count.validator = --\n[E.1] Attribute\ Count\ Validator\n
module.e.attribute.count.validator.description = Compares the number of attributes in metadata.xml to the number of attributes in according XML schema.\nThe number on both sides of the forward slash must be identical\n\n
module.e.attribute.count.validator.log.entry = \tTable "{0}": {1} attributes in metadata.xml, {2} attributes in {3}.xsd => valid = {4}

#Attribute Occurrence Validator
module.e.attribute.occurrence.validator = --\n[E.2] Attribute\ Occurence\ Validator\n
module.e.attribute.occurrence.validator.description = Compares the occurence of attributes in metadata.xml (nullable element) to the minOccurs attribute in the according XML schema.\n
module.e.attribute.occurrence.validator.log.table = \nTable\ "{0}"\n
module.e.attribute.occurrence.validator.log.column = \tColumn\ "{0}": {1}={2} (metadata.xml), {3}={4} ({5}.xsd) => valid = {6}
module.e.attribute.occurrence.nullable = nullable
module.e.attribute.occurrence.minOccurs = minOccurs
module.e.attribute.occurrence.column.name = name
module.e.attribute.occurrence.error.wrong.count = \tDifferent number of columns in metadata.xml and according XML schema. 
module.e.attribute.occurrence.error.invalid = ==> valid = 

#Attribute Type Validator
module.e.attribute.type.validator = --\n[E.3] Attribute\ Type\ Validator\n
module.e.attribute.type.validator.description = Compares the type of attributes in metadata.xml to the type attribute in the according XML schema.\n
module.e.attribute.type.validator.log.table = \nTable:\ "{0}"\n
module.e.attribute.type.validator.log.column = \tColumn "{0}": type={1}, expected type in {2}.xsd: "{3}", actual type in {4}.xsd: "{5}", => valid = {6}
module.e.atribute.type.validator.unknown.type = Unknown column type
module.e.attribute.type.error.wrong.count = \tDifferent number of columns in metadata.xml and according XML schema. 
module.e.attribute.type.error.invalid = ==> valid = 
module.e.attribute.type.validator.original.type.delimiter = (

INTEGER=xs:integer
CHARACTER\ VARYING=xs:string
#STRING=xs:string
CHARACTER\ LARGE\ OBJECT=clobType
BINARY\ LARGE\ OBJECT=blobType
TIMESTAMP=xs:dateTime
DATE=xs:date
NUMERIC=xs:decimal
SMALLINT=xs:integer
FLOAT=xs:float
BIT=xs:boolean

#Attribute Sequence validator
module.e.attribute.sequence.validator = --\n[E.4] Attribute\ Sequence\ Validator\n
module.e.attribute.sequence.validator.description = Compares the sequence of all column elements in metadata.xml to the type attributes in the according XML schemata.\n\n
module.e.attribute.sequence.validator.log.column = \tColumn type (metadata.xml):\ "{0}", column type in XML schema = {1} => valid = {2}\n

#SIARD Internal File Structure
module.f.path.to.metadata.xml = /header/metadata.xml
module.f.siard.description = /header/metadata.xml
module.f.siard.path.to.content = content

#SIARD XML Processing
module.f.metadata.xml.prefix = pre
module.f.table.xsd.prefix = xs
module.f.siard.metadata.xml.schemas.name = schemas
module.f.siard.metadata.xml.schema.name = schema
module.f.siard.metadata.xml.schema.folder.name = folder
module.f.siard.metadata.xml.tables.name = tables
module.f.siard.metadata.xml.table.name = table
module.f.siard.metadata.xml.table.folder.name = folder
module.f.siard.metadata.xml.table.schema.extension = .xsd
module.f.siard.metadata.xml.columns.name = columns
module.f.siard.metadata.xml.column.name = column
module.f.siard.metadata.xml.type.element.name = type
module.f.siard.metadata.xml.name.element.name = name
module.f.siard.metadata.xml.nullable.element.name = nullable
module.f.siard.table.xsd.type.attribute.name = type
module.f.siard.table.xsd.file.extension = .xsd
module.f.siard.table.xsd.file.extension = .xml
module.f.siard.table.xsd.complexType = complexType
module.f.siard.table.xsd.sequence = sequence
module.f.siard.table.xsd.element = element
module.f.siard.table.xsd.attribute.minOccurs.name = minOccurs

#Attribute Count Validator
module.f.attribute.count.validator = --\n[E.1] Attribute\ Count\ Validator\n
module.f.attribute.count.validator.description = Compares the number of attributes in metadata.xml to the number of attributes in according XML schema.\nThe number on both sides of the forward slash must be identical\n\n
module.f.attribute.count.validator.log.entry = \tTable "{0}": {1} attributes in metadata.xml, {2} attributes in {3}.xsd => valid = {4}

#Attribute Occurrence Validator
module.f.attribute.occurrence.validator = --\n[E.2] Attribute\ Occurence\ Validator\n
module.f.attribute.occurrence.validator.description = Compares the occurence of attributes in metadata.xml (nullable element) to the minOccurs attribute in the according XML schema.\n
module.f.attribute.occurrence.validator.log.table = \nTable\ "{0}"\n
module.f.attribute.occurrence.validator.log.column = \tColumn\ "{0}": {1}={2} (metadata.xml), {3}={4} ({5}.xsd) => valid = {6}
module.f.attribute.occurrence.nullable = nullable
module.f.attribute.occurrence.minOccurs = minOccurs
module.f.attribute.occurrence.column.name = name
module.f.attribute.occurrence.error.wrong.count = \tDifferent number of columns in metadata.xml and according XML schema. 
module.f.attribute.occurrence.error.invalid = ==> valid = 

#Attribute Type Validator
module.f.attribute.type.validator = --\n[E.3] Attribute\ Type\ Validator\n
module.f.attribute.type.validator.description = Compares the type of attributes in metadata.xml to the type attribute in the according XML schema.\n
module.f.attribute.type.validator.log.table = \nTable:\ "{0}"\n
module.f.attribute.type.validator.log.column = \tColumn "{0}": type={1}, expected type in {2}.xsd: "{3}", actual type in {4}.xsd: "{5}", => valid = {6}
module.f.atribute.type.validator.unknown.type = Unknown column type
module.f.attribute.type.error.wrong.count = \tDifferent number of columns in metadata.xml and according XML schema. 
module.f.attribute.type.error.invalid = ==> valid = 
module.f.attribute.type.validator.original.type.delimiter = (